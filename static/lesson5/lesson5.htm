<!DOCTYPE html>
<!-- saved from url=(0046)http://www.thelirios.com/lab/HTML5/SPFireBall/ -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"> 
		<title>Lesson 5</title> 
		<meta charset="utf-8">
		<meta content="image" name="medium">

		<link rel="stylesheet" type="text/css" href="./sound/css">
		<style type="text/css"> 
			body {
				background-color: #fff;
				margin: 0px;
				overflow: hidden;
			}
			a:link { text-decoration: none; color:#ddd; }
			a:visited { text-decoration: none; color:#ddd; }
			a:active { text-decoration: none; color:#ddd; }
			a:hover { text-decoration: none; color:#fff; }

			footer {
				color: #999;
				font-family: 'Lato';
				font-weight: 400;
				font-size: 11px;
				margin: 10px;
				position: absolute;
    			bottom: 0;
			}
		</style>
	</head> 
	<body>
		<script type="text/javascript" src="./sound/Sound.js"></script>
		<script type="text/javascript" src="./sound/Particle.js"></script>
		<script type="text/javascript" src="./sound/Three.js"></script>
		<script type="text/javascript" src="./sound/Detector.js"></script>

		<script type="x-shader/x-vertex" id="vertexshader">

			uniform float amplitude;
			attribute float size;
			attribute vec3 customColor;

			varying vec3 vColor;

			void main() {

				vColor = customColor;

				vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );

				//gl_PointSize = size;
				gl_PointSize = size * ( 300.0 / length( mvPosition.xyz ) );

				gl_Position = projectionMatrix * mvPosition;

			}

		</script>

		<script type="x-shader/x-fragment" id="fragmentshader">

			uniform vec3 color;
			uniform sampler2D texture;

			varying vec3 vColor;

			void main() {

				gl_FragColor = vec4( color * vColor, 1.0 );
				gl_FragColor = gl_FragColor * texture2D( texture, gl_PointCoord );

			}

		</script>


		<script type="text/javascript">
			
			/*
			@author
			Diego Pintos aka @dondiegote
			www.thelirios.com

			inspired by the wonderful magnetosphere by Robert Hodgin
			http://www.flight404.com/blog/?p=74
			/**/

			/*
			LICENSE
			This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ or send a letter to Creative Commons, 444 Castro Street, Suite 900, Mountain View, California, 94041, USA.
			/**/

			if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

			window.requestAnimFrame = (function(){
				return  window.requestAnimationFrame       || 
			    window.webkitRequestAnimationFrame || 
			    window.mozRequestAnimationFrame    || 
			    window.oRequestAnimationFrame      || 
			    window.msRequestAnimationFrame     || 
			    function(/* function */ callback, /* DOMElement */ element){
			    	window.setTimeout(callback, 1000 / 60);
			    };
			})();

			var songname;
			var cctrack = "mp3/Atomix.mp3";
			var stats, container,xtras;
			
			var SCREEN_WIDTH = window.innerWidth,
			SCREEN_HEIGHT = window.innerHeight;

			var camera, scene, renderer, sphere, sphere2, particles, particleSystem, lights = [], attributes, pointLight;
			
			var MAX = 3000;
			var radius = 500;
			var camZ = 2000;
			
			var audio, byteData;
			var snd;
			var dropText;

			var arr = [];

			// loop vars
			var theta = 0;
			var prevavg = .7;
			var bumped = false;
			var delay = 5000;
			
			setup();

			function setup() {

					xtras = document.createElement( 'div' );
					document.body.appendChild( xtras );
					
					// DOC SET UP
					container = document.createElement( 'div' );
					document.body.appendChild( container );
					
					/*
					// Mr.doob Stats
					// https://github.com/mrdoob/stats.js
					stats = new Stats();
					stats.domElement.style.position='fixed';
					stats.domElement.style.left='0px';
					stats.domElement.style.top='0px';
					xtras.appendChild( stats.domElement );
					/**/

					
					

					// drag & drop (area)
					var dropArea = document.createElement( 'div' );
					dropArea.style.position = "fixed";
					dropArea.style.width = '100%';
					dropArea.style.height = '100%';
					xtras.appendChild( dropArea );

					dropText = document.createElement( 'div' );
					dropText.style.fontFamily = 'Lato';
					dropText.style.fontWeight = '400';
					dropText.style.textAlign = 'left';
					dropText.style.fontSize = '13px';
					dropText.style.marginTop = "10px";
					dropText.style.marginLeft = "10px";
					dropText.style.color = '#999';
					dropText.innerHTML = 'Drag&Drop an audio file';

					dropArea.appendChild( dropText );
					onWindowResize(null);

					dropArea.addEventListener('drop', dropEvent, false);
					dropArea.addEventListener('dragover', dragOver, false);
					
					window.addEventListener( 'resize', onWindowResize, false );
					document.onselectstart = function() { return false };

					snd = new Sound();
					initThree();
					snd.load(cctrack);

					loop();

			}
			
			function initThree() {
				camera = new THREE.PerspectiveCamera( 75, SCREEN_WIDTH / SCREEN_HEIGHT, 1, 10000 );
				camera.position.z = camZ;

				scene = new THREE.Scene();

				renderer = new THREE.WebGLRenderer({
			        antialias: false,
			        clearColor: 0xffffff,
			        clearAlpha: 1
			    });
			    renderer.autoClear = true;
				renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);
				container.appendChild(renderer.domElement);

				var sphereMaterial = new THREE.MeshLambertMaterial(
				{
					ambient: 0x000000,
					color: 0xffffff,
					specular: 0x000000,
					shininess: 30,
					shading: THREE.SmoothShading,
					map: THREE.ImageUtils.loadTexture( "textures/Noise2.png" )
				});

				var segments = 30, rings = 30;
				sphere = new THREE.Mesh(
				   new THREE.SphereGeometry(radius,
				   segments,
				   rings),

				   sphereMaterial);
				scene.add(sphere);
				
				// General light
				pointLight = new THREE.PointLight( 0xffffff, 0 );

				pointLight.position.x = 10;
				pointLight.position.y = 50;
				pointLight.position.z = 830;
				scene.add(pointLight);

				// PARTICLES
				
				particles = new THREE.Geometry();

				// custom attributes
				attributes = {
					size: {	type: 'f', value: [] },
					customColor: { type: 'c', value: [] }
				};
				uniforms = {
					amplitude: { type: "f", value: 1.0 },
					color:     { type: "c", value: new THREE.Color( 0xffffff ) },
					texture:   { type: "t", value: 0, texture: THREE.ImageUtils.loadTexture( "textures/particle.png" ) },
				};

				var shaderMaterial = new THREE.ShaderMaterial( {
					uniforms: 		uniforms,
					attributes:     attributes,
					vertexShader:   document.getElementById( 'vertexshader' ).textContent,
					fragmentShader: document.getElementById( 'fragmentshader' ).textContent,

					//blending: 		THREE.AdditiveBlending,
					blending: 		THREE.MultiplyBlending,
					depthTest: 		true,
					transparent:	true
				});

				for ( var i = 0; i < MAX; i ++ ) {
					var pX = Math.random() * 2 - 1,
				        pY = Math.random() * 2 - 1,
				        pZ = Math.random() * 2 - 1,
				        particle = new THREE.Vertex(
				            new THREE.Vector3(pX, pY, pZ)
				        );
				    particle.position.normalize();
					particle.position.multiplyScalar( radius );
    				particles.vertices.push(particle);
    				
    				if(i < 3) {		// maxlimit lights
	    				var light = new THREE.PointLight( 0xffffff, 0 );
	    				light.position.x = pX;
	    				light.position.y = pY;
	    				light.position.z = pZ;
	    				light.position.normalize();
						light.position.multiplyScalar( radius );

	    				lights.push(light);
	    				scene.add(light);
	    			}

    				var p = new Particle(radius);
    				arr.push(p);
				}
				particleSystem = new THREE.ParticleSystem(
				    particles,
				    shaderMaterial);
				particleSystem.dynamic = true;
				
				var vertices = particleSystem.geometry.vertices;
				var values_size = attributes.size.value;
				var values_color = attributes.customColor.value;

				for( var v = 0; v < vertices.length; v++ ) {
					values_size[ v ] = 10;
					values_color[ v ] = new THREE.Color( 0xffaa00 );
				}
				particleSystem.sortParticles = true;
				scene.add(particleSystem);

			}

			function update(e, freqByteData, NUM_SAMPLES) {
				byteData = freqByteData;
			}
 			
			function onWindowResize( event ) {
				SCREEN_WIDTH = window.innerWidth;
				SCREEN_HEIGHT = window.innerHeight;

				if(camera) {
					camera.aspect = SCREEN_WIDTH / SCREEN_HEIGHT;
			    	camera.updateProjectionMatrix();
			    }

			    if(renderer) renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);

			}
			
			function loop(){
				
				var avg = 0;
				bumped = false;
				if(snd) if(snd.byteData()) {
					var byteData = snd.byteData();
					avg = averageArray(byteData)/100;
					delay++;
					bumped = false;
					var dif = .33;
					if(avg>1.3) dif = .05;
					if(avg>1.4) dif = 0;
					if(avg-prevavg>dif && delay>2500) {
						bumped = true;
						delay = 0;
					}
					prevavg = avg;

					pointLight.intensity = 2 - (.01+avg/5);
				}
				var xv = SCREEN_WIDTH/MAX;
				xv /= 2;
				for (var i = 0; i < MAX; ++i)
				{
					var val = 0;
					if(byteData) val = byteData[Math.floor(	(20+i)*(	(byteData.length-40)	/MAX))];
					val /= 255;

					var p = arr[i];
					p.update(val);
					if(bumped) p.bump(val);

					
					var particle = particles.vertices[i];

			        particle.position.normalize();
					particle.position.multiplyScalar( p.y );
					

					var tam = 80*avg;
					attributes.size.value[i] = 5+(tam*val*5);	//particle size
					var H = .10;
					attributes.customColor.value[i].setHSV( H, 1-val, 1 );
							
					if(i<3) {
						lights[i].intensity = 2 - (avg/4);
						lights[i].position.normalize();
						lights[i].position.multiplyScalar( p.y*1.5 );
					}
				}

				attributes.size.needsUpdate = true;
				attributes.customColor.needsUpdate = true;
			    particleSystem.geometry.__dirtyVertices = true;

			    theta += .3+.6*avg;

				sphere.rotation.y = 3*Math.cos( theta * Math.PI / 360 );
				particleSystem.rotation.y = -4*Math.cos( theta * Math.PI / 360 );

				sphere.rotation.x = -4*Math.sin( theta * Math.PI / 360 );
				particleSystem.rotation.x = 5*Math.sin( theta * Math.PI / 360 );

				pointLight.position.x = radius*4 * Math.sin( (theta*5) * Math.PI / 360 );
				pointLight.position.y = radius*4 * Math.cos( (theta*5) * Math.PI / 360 );

				camera.lookAt( scene.position );

				renderer.autoClear = true;
				renderer.render( scene, camera );

				requestAnimFrame(loop, container);
			}
 			
 			/*
			drag & drop
			/**/

			function dropEvent(evt) {
			    evt.stopPropagation();
			    evt.preventDefault();

			    if(snd) snd.disconnect();
			    pointLight.intensity = 0;

			    bumped = false;
			    preavg = .7;
			    delay = 5000;

			    var droppedFiles = evt.dataTransfer.files;
			    var file = droppedFiles[0];

			    var ok = false;
			    if (file.type.match('audio.*')) {
					ok = true;
				} else {
					displayText("invalid file (no audio file)");
				}
				if(ok) {
				    songname = file.name;
	    			displayText("processing: "+songname);
	    			
				    var reader = new FileReader();
				    
				    reader.onload = function(fileEvent) {
				        var data = fileEvent.target.result;
				        snd.initAudio(data);
				    }
				    reader.readAsArrayBuffer(file);
				}
			}

			function dragOver(evt) {
			    evt.stopPropagation();
			    evt.preventDefault();
			    return false;
			}

			function displayText(str) {
				dropText.innerHTML = str;
			}

			function maxArray(array) {
				var max = array[0];
				var len = array.length;
				for (var i = 0; i < len; ++i) {
					if (array[i] > max) {
				  		max = array[i];
					}
				}
				return max;
			}

			function averageArray(array) {
				var sum = 0;
				var len = array.length;
				for (var i = 0; i < len; ++i) {
					sum += array[i];
				}
				return sum / len;
			}

		</script>

		

		

	 
</body></html>